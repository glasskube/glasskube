---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: packageinfos.packages.glasskube.dev
spec:
  group: packages.glasskube.dev
  names:
    kind: PackageInfo
    listKind: PackageInfoList
    plural: packageinfos
    singular: packageinfo
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PackageInfo is the Schema for the packageinfos API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PackageInfoSpec defines the desired state of PackageInfo
            properties:
              name:
                type: string
              repositoryUrl:
                type: string
            required:
            - name
            type: object
          status:
            description: PackageInfoStatus defines the observed state of PackageInfo
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              lastUpdateTimestamp:
                format: date-time
                type: string
              manifest:
                properties:
                  defaultNamespace:
                    description: DefaultNamespace to install the package. May be overridden.
                    type: string
                  entrypoints:
                    items:
                      description: PackageEntrypoint defines a service port a user
                        may use to access the package
                      properties:
                        localPort:
                          description: LocalPort to use for port mapping
                          format: int32
                          type: integer
                        name:
                          description: Name of this entrypoint. Used for "glasskube
                            open [package-name] [entrypoint-name]" if more than one
                            entrypoint exists. Optional if the package only has one
                            entrypoint.
                          type: string
                        port:
                          description: Port of the service to bind to
                          format: int32
                          type: integer
                        scheme:
                          type: string
                        serviceName:
                          description: ServiceName is the name of a service that is
                            part of
                          type: string
                      required:
                      - port
                      - serviceName
                      type: object
                    type: array
                  helm:
                    description: Helm instructs the controller to create a helm release
                      when installing this package.
                    properties:
                      chartName:
                        description: ChartName is the name of the chart that represents
                          this package.
                        type: string
                      chartVersion:
                        description: ChartVersion of the chart that should be installed.
                        type: string
                      repositoryUrl:
                        description: RepositoryUrl is the remote URL of the helm repository.
                          This is the same URL you would use if you use "helm repo
                          add ...".
                        type: string
                      values:
                        description: Values that should be used for the helm release
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - chartName
                    - chartVersion
                    - repositoryUrl
                    type: object
                  iconUrl:
                    type: string
                  kustomize:
                    description: Kustomize instructs the controller to apply a kustomization
                      when installing this package [PLACEHOLDER].
                    type: object
                  longDescription:
                    type: string
                  manifests:
                    items:
                      properties:
                        url:
                          type: string
                      required:
                      - url
                      type: object
                    type: array
                  name:
                    type: string
                  references:
                    items:
                      properties:
                        label:
                          type: string
                        url:
                          type: string
                      required:
                      - label
                      - url
                      type: object
                    type: array
                  shortDescription:
                    type: string
                required:
                - name
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
